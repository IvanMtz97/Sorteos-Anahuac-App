"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var dialogs = require("ui/dialogs");
var utils = require("utils/utils");
var http_get_services_1 = require("../services/http-get/http-get.services");
var http_post_services_1 = require("../services/http-post/http-post.services");
var session_services_1 = require("../services/session/session.services");
var router_extensions_1 = require("nativescript-angular/router/router-extensions");
var platformModule = require("tns-core-modules/platform");
var loading_1 = require("../services/loading/loading");
var http = require("http");
var connectivity = require("tns-core-modules/connectivity");
var timer = require("timer");
var http_put_services_1 = require("../services/http-put/http-put.services");
var LoginComponent = /** @class */ (function () {
    function LoginComponent(page, router, myGetService, session, loader, API, PUT) {
        this.router = router;
        this.myGetService = myGetService;
        this.session = session;
        this.loader = loader;
        this.API = API;
        this.PUT = PUT;
        this.Correo = "";
        this.Clave = "";
        this.nextLibAvailable = false;
        this.Check = false;
        this.Info = {
            token: "",
            correo: "",
            sistema: ""
        };
        page.actionBarHidden = true;
    }
    LoginComponent.prototype.ngOnInit = function () {
        if (this.session.loggedIn()) {
            this.session.setLoggedIn(false);
        }
        this.SorteoActivo();
        this.downloadImage();
        console.log("Correo: " + this.session.getCorreo() + ", Clave: " + this.session.getClave());
        this.Correo = this.session.getCorreo();
        this.Clave = this.session.getClave();
    };
    LoginComponent.prototype.toggleCheck = function (eventData) {
        this.Check = eventData.checked;
    };
    LoginComponent.prototype.downloadImage = function () {
        var _this = this;
        http.getImage("https://sorteoanahuac.mx/app/banner_1.jpg").then(function (r) {
            _this.imagenPublicitaria = "data:image/png;base64," + r.toBase64String();
            _this.session.setImagenPublicidad("data:image/png;base64," + r.toBase64String());
        }, function (err) {
        });
    };
    //GET INICIO SESION-------->
    LoginComponent.prototype.IniciarSesion = function () {
        var _this = this;
        this.loader.display(true);
        this.myGetService
            .getLogin({ email: this.Correo, password: this.Clave }, 'api/Colaborador/' + platformModule.device.uuid)
            .subscribe(function (result) {
            _this.onGetDataSesion(result);
        }, function (error) {
            _this.loader.display(false);
            _this.validarConexion();
        });
    };
    LoginComponent.prototype.onGetDataSesion = function (data) {
        console.log("CHECKBOX " + this.Check);
        if (this.Check) {
            console.log("ENTRA TRUE");
            this.session.setClave(this.Clave);
            this.session.setCorreo(this.Correo);
        }
        else {
            console.log("ENTRA FALSE");
            this.session.setClave("");
            this.session.setCorreo("");
        }
        this.setInfo(data);
        this.PostRegistroDispositivo(this.session.getTokenDevice());
    };
    //END GET --------->
    //POST REGISTRO DISPOSITIVO
    LoginComponent.prototype.PostRegistroDispositivo = function (token) {
        var _this = this;
        console.log("<------ REGISTRAR DEVICE --------->");
        console.log("<<<<<<<<<<<<<TOKEN DEVICE -> ", token);
        this.Info.token = token;
        this.Info.sistema = platformModule.device.os;
        this.Info.correo = this.session.getCorreoColaborador();
        console.log("<<<<<<<<<<<<DATA ENVIO DISPOSITIVO>>>>>>>>>>>>>>>", JSON.stringify(this.Info));
        this.API.postNoAuth(this.Info, "api/Dispositivos/Agregar").subscribe(function (res) {
            _this.loader.display(false);
            //  dialogs.alert({
            //      title: "AVISO",
            //      message: "Dispositivo agregado exitosamente",
            //      okButtonText: "Ok"
            //  }).then(() => {
            //  });
        }, function (error) {
            console.log("ERROR AL REGISTRAR DISPOSITIVO");
            console.log(error);
        });
    };
    //END POST
    //GET SORTEO -------->
    LoginComponent.prototype.SorteoActivo = function () {
        var _this = this;
        //this.loader.display(true);
        this.myGetService
            .getData('api/Sorteo/Activo')
            .subscribe(function (result) {
            console.log("result -> \n" + JSON.stringify(result.json()));
            _this.session.setSorteoActivo(JSON.stringify(result.json()));
            _this.session.setMiCuenta(JSON.stringify(result.json().url_cambio_contrasena));
            _this.session.setPoliticas(JSON.stringify(result.json().url_politicas));
            _this.session.setReglamento(JSON.stringify(result.json().url_reglamento));
            _this.session.setAceptacionTalonarios(JSON.stringify(result.json().url_aceptacion));
            _this.session.setGanadores(JSON.stringify(result.json().url_lista_ganadores));
            _this.session.setConoceSorteo(JSON.stringify(result.json().url_conoce));
            _this.session.setCondiciones(JSON.stringify(result.json().url_condiciones));
        }, function (error) {
            //this.loader.display(false);
            //this.mostrarMensaje('Error', 'Falló al tratar obtener el sorteo activo.');
            console.log("Error al tratar de obtener servicio");
            console.log(error);
        });
        this.politicas = this.session.getPoliticas();
        this.condiciones = this.session.getCondiciones();
    };
    //END GET --------->
    LoginComponent.prototype.setInfo = function (data) {
        var _this = this;
        this.session.setLoggedIn(true);
        this.session.setInformation(JSON.stringify(data.json()));
        this.session.setToken(data.json().token);
        this.session.setIdColaborador(data.json().identificador);
        this.session.setCorreoColaborador(data.json().correo);
        this.session.setPassColaborador(this.Clave);
        this.setPrivacidad(data.json().clave);
        console.log("Datos en sesión -> \n");
        console.log(JSON.stringify(data.json()));
        var id = timer.setTimeout(function () {
            _this.setTimer();
        }, 3500);
        // if(this.session.getFirstRun() == true){
        //     this.router.navigate(["privacidad"], { clearHistory: true });
        // }else{
        //     this.router.navigate(["talonarios"], { clearHistory: true });
        // }
    };
    LoginComponent.prototype.Politicas = function () {
        utils.openUrl(JSON.parse(this.politicas));
    };
    LoginComponent.prototype.Condiciones = function () {
        utils.openUrl(JSON.parse(this.condiciones));
    };
    LoginComponent.prototype.ConoceSorteo = function () {
        this.router.navigate(["conocesorteo"]);
    };
    LoginComponent.prototype.ListaGanadores = function () {
        this.router.navigate(["ganadores"]);
    };
    LoginComponent.prototype.mostrarMensaje = function (titulo, mensaje) {
        dialogs.alert({
            title: titulo,
            message: mensaje,
            okButtonText: "Ok"
        });
    };
    LoginComponent.prototype.Entrar = function () {
        console.log("CORREO: " + this.Correo + ", CLAVE: " + this.Clave);
        if (this.Correo.length == 0 || this.Clave.length == 0) {
            dialogs.alert({
                title: "Aviso",
                message: "Debes llenar todos los campos.",
                okButtonText: "Ok"
            });
        }
        else {
            this.IniciarSesion();
        }
    };
    LoginComponent.prototype.validarConexion = function () {
        var connectionType = connectivity.getConnectionType();
        if (connectionType == connectivity.connectionType.none) {
            this.mostrarMensaje('Autenticación', 'No se encontro una conexión a internet.');
        }
        else {
            this.mostrarMensaje('Autenticación', 'Usuario o contraseña inválidos. Recuerda que esta aplicación es únicamente para colaboradores de Sorteos Anáhuac.');
        }
    };
    LoginComponent.prototype.setTimer = function () {
        this.loader.display(false);
    };
    LoginComponent.prototype.setPrivacidad = function (PK1) {
        var _this = this;
        this.PUT.putData({}, "api/Colaborador/Actualiza/" + PK1).subscribe(function (res) {
            console.log("ACTUALIZADO EXITOSO");
            console.log(res);
            console.log("------------\n" + res.text());
            if (res.text() == "1") {
                console.log("No mostrar privacidad");
                _this.validaPrivacidad = 1;
            }
            else {
                console.log("Mostrar privacidad");
                _this.validaPrivacidad = 0;
            }
            console.log("Privacidad -> " + _this.validaPrivacidad);
            if (_this.validaPrivacidad == 0) {
                console.log("Mostrando privacidad");
                _this.router.navigate(["privacidad"], { clearHistory: true });
            }
            else if (_this.validaPrivacidad == 1) {
                console.log("No mostrando privacidad");
                _this.router.navigate(["talonarios"], { clearHistory: true });
            }
            else {
                console.log("No mostrando privacidadx2");
                _this.router.navigate(["talonarios"], { clearHistory: true });
            }
        }, function (error) {
            console.log("ACTUALIZADO FALLIDO");
            console.log(error);
        });
    };
    LoginComponent = __decorate([
        core_1.Component({
            selector: "Login",
            moduleId: module.id,
            templateUrl: "./login.component.html",
            providers: [http_get_services_1.MyHttpGetService, session_services_1.SessionService, loading_1.LoadingService, http_post_services_1.MyHttpPostService, http_put_services_1.MyHttpPutService]
        }),
        __metadata("design:paramtypes", [page_1.Page, router_extensions_1.RouterExtensions, http_get_services_1.MyHttpGetService, session_services_1.SessionService, loading_1.LoadingService, http_post_services_1.MyHttpPostService, http_put_services_1.MyHttpPutService])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,
